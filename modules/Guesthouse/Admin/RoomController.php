<?php
namespace Modules\Guesthouse\Admin;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Modules\AdminController;
use Modules\Core\Models\Attributes;
use Modules\Guesthouse\Models\GuesthouseRoom;
use Modules\Guesthouse\Models\GuesthouseRoomTerm;
use Modules\Guesthouse\Models\GuesthouseRoomTranslation;
use Modules\Location\Models\Location;
use Modules\Guesthouse\Models\Guesthouse;
use Modules\Guesthouse\Models\GuesthouseTerm;
use Modules\Guesthouse\Models\GuesthouseTranslation;

class RoomController extends AdminController
{
    protected $guesthouseClass;
    protected $roomTermClass;
    protected $attributesClass;
    protected $locationClass;
    /**
     * @var GuesthouseRoom
     */
    protected $roomClass;
    protected $currentGuesthouse;
    protected $roomTranslationClass;

    public function __construct()
    {
        parent::__construct();
        $this->setActiveMenu('admin/module/guesthouse');
        $this->guesthouseClass = Guesthouse::class;
        $this->roomTermClass = GuesthouseRoomTerm::class;
        $this->attributesClass = Attributes::class;
        $this->locationClass = Location::class;
        $this->roomClass = GuesthouseRoom::class;
        $this->roomTranslationClass = GuesthouseRoomTranslation::class;
    }
    public function callAction($method, $parameters)
    {
        if(!Guesthouse::isEnable())
        {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    protected function hasGuesthousePermission($guesthouse_id = false){
        if(empty($guesthouse_id)) return false;

        $guesthouse = $this->guesthouseClass::find($guesthouse_id);
        if(empty($guesthouse)) return false;

        if(!$this->hasPermission('guesthouse_manage_others') and $guesthouse->create_user != Auth::id()){
            return false;
        }

        $this->currentGuesthouse = $guesthouse;
        return true;
    }
    public function index(Request $request,$guesthouse_id)
    {
        $this->checkPermission('guesthouse_view');

        if(!$this->hasGuesthousePermission($guesthouse_id))
        {
            abort(403);
        }

        $query = $this->roomClass::query() ;

        $query->orderBy('id', 'desc');
        if (!empty($guesthouse_name = $request->input('s'))) {
            $query->where('title', 'LIKE', '%' . $guesthouse_name . '%');
            $query->orderBy('title', 'asc');
        }

        $query->where('parent_id',$guesthouse_id);
        $data = [
            'rows'               => $query->with(['author'])->paginate(20),
            'guesthouse_manage_others' => $this->hasPermission('guesthouse_manage_others'),
            'breadcrumbs'        => [
                [
                    'name' => __('Guesthouses'),
                    'url'  => 'admin/module/guesthouse'
                ],
                [
                    'name' => __('Guesthouse: :name',['name'=>$this->currentGuesthouse->title]),
                    'url'  => 'admin/module/guesthouse/edit/'.$this->currentGuesthouse->id
                ],
                [
                    'name'  => __('Room Management'),
                    'class' => 'active'
                ],
            ],
            'page_title'=>__("Room Management"),
            'guesthouse'=>$this->currentGuesthouse,
            'row'=> new $this->roomClass(),
            'translation'=>new $this->roomTranslationClass(),
            'attributes'     => $this->attributesClass::where('service', 'guesthouse_room')->get(),
        ];
        return view('Guesthouse::admin.room.index', $data);
    }

    public function edit(Request $request, $guesthouse_id,$id)
    {
        $this->checkPermission('guesthouse_update');

        if(!$this->hasGuesthousePermission($guesthouse_id))
        {
            abort(403);
        }

        $row = $this->roomClass::find($id);
        if (empty($row) or $row->parent_id != $guesthouse_id) {
            return redirect(route('guesthouse.admin.room.index',['guesthouse_id'=>$guesthouse_id]));
        }

        $translation = $row->translateOrOrigin($request->query('lang'));
        if (!$this->hasPermission('guesthouse_manage_others')) {
            if ($row->create_user != Auth::id()) {
                return redirect(route('guesthouse.admin.room.index'));
            }
        }
        $data = [
            'row'            => $row,
            'translation'    => $translation,
            "selected_terms" => $row->terms->pluck('term_id'),
            'attributes'     => $this->attributesClass::where('service', 'guesthouse_room')->get(),
            'enable_multi_lang'=>true,
            'breadcrumbs'    => [
                [
                    'name' => __('Guesthouses'),
                    'url'  => 'admin/module/guesthouse'
                ],
                [
                    'name' => __('Guesthouse: :name',['name'=>$this->currentGuesthouse->title]),
                    'url'  => 'admin/module/guesthouse/edit/'.$this->currentGuesthouse->id
                ],
                [
                    'name' => __('All Rooms'),
                    'url'  => 'admin/module/guesthouse/room/'.$this->currentGuesthouse->id.'/index'
                ],
                [
                    'name' => __('Edit room: :name',['name'=>$row->title]),
                    'url'  => 'admin/module/guesthouse/room/'.$this->currentGuesthouse->id.'/edit/'.$id
                ],
            ],
            'page_title'=>__("Edit: :name",['name'=>$row->title]),
            'guesthouse'=>$this->currentGuesthouse
        ];
        return view('Guesthouse::admin.room.detail', $data);
    }

    public function store( Request $request, $guesthouse_id,$id ){

        if(!$this->hasGuesthousePermission($guesthouse_id))
        {
            abort(403);
        }
        if($id>0){
            $this->checkPermission('guesthouse_update');
            $row = $this->roomClass::find($id);
            if (empty($row)) {
                return redirect(route('guesthouse.admin.index'));
            }

            if($row->create_user != Auth::id() and !$this->hasPermission('guesthouse_manage_others'))
            {
                return redirect(route('guesthouse.admin.room.index'));
            }

            if($row->parent_id != $guesthouse_id)
            {
                return redirect(route('guesthouse.admin.room.index'));
            }
        }else{
            $this->checkPermission('guesthouse_create');
            $row = new $this->roomClass();
            $row->status = "publish";
        }
        $dataKeys = [
            'title',
            'content',
            'image_id',
            'gallery',
            'price',
            'number',
            'beds',
            'size',
            'adults',
            'children',
            'status',
        ];

        $row->fillByAttr($dataKeys,$request->input());
	    $row->ical_import_url  = $request->ical_import_url;

        if($id<0){
            $row->parent_id = $guesthouse_id;
        }

        $res = $row->saveOriginOrTranslation($request->input('lang'),true);

        if ($res) {
            if(!$request->input('lang') or is_default_lang($request->input('lang'))) {
                $this->saveTerms($row, $request);
            }

            if($id > 0 ){
                return redirect()->back()->with('success',  __('Room updated') );
            }else{
                return redirect()->back()->with('success',  __('Room created') );
            }
        }
    }

    public function saveTerms($row, $request)
    {
        $this->checkPermission('guesthouse_manage_attributes');
        if (empty($request->input('terms'))) {
            $this->roomTermClass::where('target_id', $row->id)->delete();
        } else {
            $term_ids = $request->input('terms');
            foreach ($term_ids as $term_id) {
                $this->roomTermClass::firstOrCreate([
                    'term_id' => $term_id,
                    'target_id' => $row->id
                ]);
            }
            $this->roomTermClass::where('target_id', $row->id)->whereNotIn('term_id', $term_ids)->delete();
        }
    }

    public function bulkEdit(Request $request)
    {
        $ids = $request->input('ids');
        $action = $request->input('action');
        if (empty($ids) or !is_array($ids)) {
            return redirect()->back()->with('error', __('No items selected!'));
        }
        if (empty($action)) {
            return redirect()->back()->with('error', __('Please select an action!'));
        }
        switch ($action){
            case "delete":
                foreach ($ids as $id) {
                    $query = $this->roomClass::where("id", $id);
                    if (!$this->hasPermission('guesthouse_manage_others')) {
                        $query->where("create_user", Auth::id());
                        $this->checkPermission('guesthouse_delete');
                    }
                    $query->first();
                    if(!empty($query)){
                        $query->delete();
                    }
                }
                return redirect()->back()->with('success', __('Deleted success!'));
                break;
            case "clone":
                $this->checkPermission('guesthouse_create');
                foreach ($ids as $id) {
                    (new $this->roomClass())->saveCloneByID($id);
                }
                return redirect()->back()->with('success', __('Clone success!'));
                break;
            default:
                // Change status
                foreach ($ids as $id) {
                    $query = $this->roomClass::where("id", $id);
                    if (!$this->hasPermission('guesthouse_manage_others')) {
                        $query->where("create_user", Auth::id());
                        $this->checkPermission('guesthouse_update');
                    }
                    $query->update(['status' => $action]);
                }
                return redirect()->back()->with('success', __('Update success!'));
                break;
        }
    }
}
