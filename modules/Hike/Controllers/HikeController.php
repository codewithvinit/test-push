<?php

namespace Modules\Hike\Controllers;

use App\Http\Controllers\Controller;
use DB;
use Illuminate\Http\Request;
use Modules\Core\Models\Attributes;
use Modules\Hike\Models\Hike;
use Modules\Hike\Models\HikeCategory;
use Modules\Location\Models\Location;
use Modules\Review\Models\Review;

class HikeController extends Controller {
    protected $hikeClass;
    protected $locationClass;
    protected $hikeCategoryClass;
    protected $attributesClass;

    public function __construct() {
        $this->hikeClass = Hike::class;
        $this->locationClass = Location::class;
        $this->hikeCategoryClass = HikeCategory::class;
        $this->attributesClass = Attributes::class;
    }

    public function callAction($method, $parameters) {
        if (setting_item('hike_disable')) {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    public function index(Request $request) {
        $is_ajax = $request->query('_ajax');
        $list = call_user_func([$this->hikeClass, 'search'], $request);
        $markers = [];
        if (!empty($list)) {
            foreach ($list as $row) {
                $markers[] = [
                    "id" => $row->id,
                    "title" => $row->title,
                    "lat" => (float)$row->map_lat,
                    "lng" => (float)$row->map_lng,
                    "gallery" => $row->getGallery(true),
                    "infobox" => view('Hike::frontend.layouts.search.loop-gird', ['row' => $row, 'disable_lazyload' => 1, 'wrap_class' => 'infobox-item'])->render(),
                    //TODO Change the icon here
                    'marker' => url('images/icons/png/pin.png'),
                ];
            }
        }
        $limit_location = 15;
        if (empty(setting_item("space_location_search_style")) or setting_item("space_location_search_style") == "normal") {
            $limit_location = 1000;
        }
        $data = [
            'rows' => $list,
            'hike_category' => $this->hikeCategoryClass::where('status', 'publish')->with(['translations'])->get()->toTree(),
            'tour_location' => $this->locationClass::where('status', 'publish')->with(['translations'])->limit($limit_location)->get()->toTree(),
            'hike_min_max_price' => $this->hikeClass::getMinMaxPrice(),
            'markers' => $markers,
            "blank" => 1,
            "seo_meta" => $this->hikeClass::getSeoMetaForPageList()
        ];
        $layout = setting_item("hike_layout_search", 'normal');
        if ($request->query('_layout')) {
            $layout = $request->query('_layout');
        }
        if ($is_ajax) {
            return $this->sendSuccess([
                'html' => view('Hike::frontend.layouts.search-map.list-item', $data)->render(),
                "markers" => $data['markers']
            ]);
        }
        $data['attributes'] = $this->attributesClass::where('service', 'hike')->with(['terms', 'translations'])->get();
        if ($layout == "map") {
            $data['body_class'] = 'has-search-map';
            $data['html_class'] = 'full-page';
            return view('Hike::frontend.search-map', $data);
        }
        return view('Hike::frontend.search', $data);
    }

    public function detail(Request $request, $slug) {
        $row = $this->hikeClass::where('slug', $slug)->with(['location', 'translations', 'hasWishList'])->first();
        if (empty($row) or !$row->hasPermissionDetailView()) {
            return redirect('/');
        }
        $translation = $row->translateOrOrigin(app()->getLocale());
        $hike_related = [];
        $location_id = $row->location_id;
        if (!empty($location_id)) {
            $hike_related = $this->hikeClass::where('location_id', $location_id)->where("status", "publish")->take(4)->whereNotIn('id', [$row->id])->with(['location', 'translations', 'hasWishList'])->get();
        }
        $review_list = Review::where('object_id', $row->id)
            ->where('object_model', 'hike')
            ->where("status", "approved")
            ->orderBy("id", "desc")
            ->with('author')
            ->paginate(setting_item('hike_review_number_per_page', 5));
        $data = [
            'row' => $row,
            'translation' => $translation,
            'hike_related' => $hike_related,
            'booking_data' => $row->getBookingData(),
            'review_list' => $review_list,
            'seo_meta' => $row->getSeoMetaWithTranslation(app()->getLocale(), $translation),
            'body_class' => 'is_single'
        ];
        $this->setActiveMenu($row);
        return view('Hike::frontend.detail', $data);
    }
}
